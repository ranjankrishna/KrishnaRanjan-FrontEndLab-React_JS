[{"/Users/kranjan/Documents/GreatLearning/expense_tracker/src/index.tsx":"1","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/reportWebVitals.ts":"2","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/App.tsx":"3","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/Components/ShowList.tsx":"4","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/Components/ExpenseTracker.tsx":"5","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/services/menu.ts":"6"},{"size":554,"mtime":1657449430000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1657449430000,"results":"9","hashOfConfig":"8"},{"size":507,"mtime":1657453318000,"results":"10","hashOfConfig":"8"},{"size":3293,"mtime":1657453548000,"results":"11","hashOfConfig":"8"},{"size":4009,"mtime":1657455130000,"results":"12","hashOfConfig":"8"},{"size":619,"mtime":1657643292622,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"67e2u9",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kranjan/Documents/GreatLearning/expense_tracker/src/index.tsx",[],[],"/Users/kranjan/Documents/GreatLearning/expense_tracker/src/reportWebVitals.ts",[],[],"/Users/kranjan/Documents/GreatLearning/expense_tracker/src/App.tsx",[],[],"/Users/kranjan/Documents/GreatLearning/expense_tracker/src/Components/ShowList.tsx",["34"],[],"import { useEffect, useState } from \"react\";\r\nimport IDataList from \"../model/IDataList\";\r\nimport { getDataFromServer } from \"../services/menu\";\r\nimport ExpenseTracker from \"./ExpenseTracker\";\r\n\r\nfunction ShowData() {\r\n  const [items, setItems] = useState<IDataList[]>([]);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [sum, setSum] = useState<number | null>();\r\n  const [rahulspent, setRahulspent] = useState<number>(0);\r\n  const [rameshspent, setRameshspent] = useState<number>(0);\r\n  const [showform, setShowForm] = useState<boolean>(false);\r\n\r\n  var rahulspent1: number = 0;\r\n  var rameshspent1: number = 0;\r\n\r\n  useEffect(() => {\r\n    const fetchMenu = async () => {\r\n      try {\r\n        const data = await getDataFromServer();\r\n        setItems(data);\r\n        setSum(\r\n          data.reduce(\r\n            (result, currentObject) => (result = result + currentObject.price),\r\n            0\r\n          )\r\n        );\r\n        Shares(data);\r\n      } catch (error: any) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchMenu();\r\n  }, [showform]);\r\n\r\n  const Shares = (data: IDataList[]) => {\r\n    data.map((sams) =>\r\n      sams.payeeName === \"Rahul\"\r\n        ? (rahulspent1 = rahulspent1 + sams.price)\r\n        : (rameshspent1 = rameshspent1 + sams.price)\r\n    );\r\n    setRahulspent(rahulspent1);\r\n    setRameshspent(rameshspent1);\r\n  };\r\n\r\n  const success = () => {\r\n    setShowForm(false);\r\n  };\r\n  const cancel = () => {\r\n    setShowForm(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header id=\"page-Header\">Expense Tracker</header>\r\n      <button id=\"Add-Button\" onClick={() => setShowForm(true)}>\r\n        Add\r\n      </button>\r\n      {showform && (\r\n        <div className=\"form\">\r\n          <ExpenseTracker onTrue={success} onClose={cancel} />\r\n        </div>\r\n      )}\r\n      <>\r\n        <div className=\"use-inline date header-color\">Date</div>\r\n        <div className=\"use-inline header-color\">Product Purchased</div>\r\n        <div className=\"use-inline price header-color\">Price</div>\r\n        <div className=\"use-inline header-color\" style={{ width: 112 }}>\r\n          Payee\r\n        </div>\r\n      </>\r\n      {items &&\r\n        items.map((user, idx) => (\r\n          <div key={idx}>\r\n            <div className=\"use-inline date\">{user.setDate}</div>\r\n            <div className=\"use-inline\">{user.product}</div>\r\n            <div className=\"use-inline price\">{user.price}</div>\r\n            <div className={`use-inline ${user.payeeName}`}>\r\n              {user.payeeName}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      <hr />\r\n      <div className=\"use-inline \">Total: </div>\r\n      <span className=\"use-inline total\">{sum}</span> <br />\r\n      <div className=\"use-inline \">Rahul paid: </div>\r\n      <span className=\"use-inline total Rahul\">{rahulspent}</span> <br />\r\n      <div className=\"use-inline \">Ramesh paid: </div>\r\n      <span className=\"use-inline total Ramesh\">{rameshspent}</span> <br />\r\n      <span className=\"use-inline payable\">\r\n        {rahulspent > rameshspent ? \"Pay Rahul \" : \"Pay Ramesh\"}\r\n      </span>\r\n      <span className=\"use-inline payable price\">\r\n        {\" \"}\r\n        {Math.abs((rahulspent - rameshspent) / 2)}\r\n      </span>\r\n      {error && <>{error?.message}</>}\r\n    </>\r\n  );\r\n}\r\nexport default ShowData;\r\n","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/Components/ExpenseTracker.tsx",["35","36"],[],"import React, { ChangeEvent, Component, FormEvent } from \"react\";\r\nimport { pushDataToUser } from \"../services/menu\";\r\n\r\ntype Props = {\r\n  onTrue: any;\r\n  onClose: any;\r\n};\r\n\r\ntype State = {\r\n  payeeName: string;\r\n  product: string;\r\n  price: number;\r\n  setDate: string;\r\n};\r\n\r\nclass ExpenseTracker extends React.Component<any, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      payeeName: \"\",\r\n      product: \"\",\r\n      price: 0,\r\n      setDate: this.setDefaultDate(),\r\n    };\r\n\r\n    this.setpayee = this.setpayee.bind(this);\r\n    this.setProduct = this.setProduct.bind(this);\r\n    this.setProduct = this.setProduct.bind(this);\r\n    this.loggedDate = this.loggedDate.bind(this);\r\n  }\r\n\r\n  setDefaultDate = () => {\r\n    const today = new Date();\r\n    return (\r\n      today.getFullYear() +\r\n      \"-\" +\r\n      (\"0\" + (today.getMonth() + 1)).slice(-2) +\r\n      \"-\" +\r\n      (\"0\" + today.getDate()).slice(-2)\r\n    );\r\n  };\r\n\r\n  setpayee = (event: ChangeEvent<HTMLSelectElement>) => {\r\n    this.setState({\r\n      payeeName: event.target.value,\r\n    });\r\n  };\r\n\r\n  setProduct = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      product: event.target.value,\r\n    });\r\n  };\r\n\r\n  setPrice = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      price: parseInt(event.target.value),\r\n    });\r\n  };\r\n\r\n  loggedDate = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // console.log(e.target.value)\r\n    // console.log(typeof (e.target.value))\r\n\r\n    this.setState({\r\n      setDate: e.target.value,\r\n    });\r\n  };\r\n\r\n  submitHandler = async (event: FormEvent<HTMLFormElement>) => {\r\n    event?.preventDefault();\r\n    // console.log(this.state)\r\n    const finalData = {\r\n      ...this.state,\r\n    };\r\n    const data = await pushDataToUser(finalData);\r\n    // console.log(data)\r\n    this.props.onTrue();\r\n  };\r\n\r\n  el = document.createElement(\"div\");\r\n\r\n  render() {\r\n    const element = (\r\n      <>\r\n        <section>\r\n          <header>\r\n            <h1>Add New Item</h1>\r\n            <p>\r\n              Read the below instructions before proceeding:\r\n              <br /> Make sure you fill all the fileds where * is provided\r\n            </p>\r\n          </header>\r\n          <form onSubmit={this.submitHandler}>\r\n            <article>\r\n              <p>Name</p>\r\n              <select\r\n                name=\"Name\"\r\n                id=\"district\"\r\n                required\r\n                value={this.state.payeeName}\r\n                onChange={this.setpayee}\r\n              >\r\n                <option value=\"\" defaultChecked>\r\n                  Choose\r\n                </option>\r\n                <option value=\"Rahul\">Rahul</option>\r\n                <option value=\"Ramesh\">Ramesh</option>\r\n              </select>\r\n            </article>\r\n\r\n            <article>\r\n              <p>Product purchased</p>\r\n              <input\r\n                type=\"text\"\r\n                required\r\n                value={this.state.product}\r\n                onChange={this.setProduct}\r\n              />\r\n            </article>\r\n\r\n            <article>\r\n              <p>Price</p>\r\n              <input\r\n                type=\"number\"\r\n                required\r\n                value={this.state.price}\r\n                onChange={this.setPrice}\r\n              />\r\n            </article>\r\n\r\n            <article>\r\n              <p>Date</p>\r\n              <input\r\n                type=\"date\"\r\n                required\r\n                value={this.state.setDate}\r\n                onChange={this.loggedDate}\r\n              />\r\n            </article>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"form-button\"\r\n              onClick={this.props.onClose}\r\n            >\r\n              Close\r\n            </button>\r\n            {/* <button>Reset</button> */}\r\n            <button className=\"form-button\">Submit</button>\r\n          </form>\r\n        </section>\r\n      </>\r\n    );\r\n\r\n    return element;\r\n  }\r\n}\r\nexport default ExpenseTracker;\r\n","/Users/kranjan/Documents/GreatLearning/expense_tracker/src/services/menu.ts",[],[],{"ruleId":"37","severity":1,"message":"38","line":34,"column":6,"nodeType":"39","endLine":34,"endColumn":16,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":30,"nodeType":"43","messageId":"44","endLine":1,"endColumn":39},{"ruleId":"41","severity":1,"message":"45","line":76,"column":11,"nodeType":"43","messageId":"44","endLine":76,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Shares'. Either include it or remove the dependency array.","ArrayExpression",["46"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.",{"desc":"47","fix":"48"},"Update the dependencies array to be: [Shares, showform]",{"range":"49","text":"50"},[1064,1074],"[Shares, showform]"]